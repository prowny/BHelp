@using System.Web.Mvc.Html
@model BHelp.ViewModels.HouseholdViewModel
@{ Layout = null; }
<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>OD_Update_Household</title>
    <script src="~/Scripts/jquery-3.7.1.min.js"></script>
    <script src="~/Scripts/jquery.validate.min.js"></script>
    <script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>
    <script src="~/Scripts/jquery-ui-1.13.2.min.js"></script>
    <link rel="stylesheet" href="~/Content/themes/base/jquery-ui.min.css" /> @*// for date-picker*@
    <script src="@Url.Content("/Scripts/BHelpFunctions.js")"></script>
    <style>
        #SaveButton {
            background-color: blue;
            color: white
        }

        #DeleteButton {
            background-color: red;
            color: white
        }

        #AddButton {
            background-color: green;
            color: white
        }

        .agewidth {
            width: 10px
        }
    </style>
    <link rel="icon" href="~/images/bhlogo.ico" type="image/x-icon" />
</head>  @*head + style*@
<body>
    @using (Html.BeginForm("HouseholdAndDeliveryActions", "OD", FormMethod.Post))
    {
            @Html.AntiForgeryToken()
            <div class="form-horizontal">
                <b>Household Delivery Data</b>
                @if(Model.OpenDeliveryExists)
                {<span style ="color: red"><b>&nbsp;&nbsp;This Client Has an Open Delivery!</b></span>
                }
                <table>
                    <tr>
                        <td style="text-align: right">Deliveries This Month:</td>
                        <td>@Html.Label(@Model.DeliveriesThisMonth.ToString())</td>
                        <td style="text-align: right">Last Delivery:</td>
                        @if (Model.DateLastDelivery == DateTime.MinValue)
                        {
                            <td>@Html.Label("(none)")</td>
                        }
                        else
                        {
                            <td>@Html.Label(@Model.DateLastDelivery.ToShortDateString())</td>
                        }

                        <td style="text-align: right">Next Eligible Delivery:</td>
                        <td>@Html.Label(@Model.NextDeliveryEligibleDate.ToShortDateString())</td>
                    </tr>
                    <tr>
                        <td style="text-align: right">Gift Cards This Month:</td>
                        <td>@Html.Label(@Model.GiftCardsThisMonth.ToString())</td>
                        @if (Model.DateLastGiftCard == DateTime.MinValue)
                        {
                            <td style="text-align: right">Last Gift Card:</td>
                            <td>@Html.Label("(none)")</td>
                        }
                        else
                        {
                            <td style="text-align: right">Last Gift Card:</td>
                            <td>@Html.Label(@Model.DateLastGiftCard.ToShortDateString())</td>
                        }
                        <td style="text-align: right">Next Gift Card Eligible:</td>
                        <td>@Html.Label(@Model.NextGiftCardEligibleDate.ToShortDateString())</td>
                        <td style="text-align: right">Date Client Created:</td>
                        <td>@Html.Label(@Model.DateCreated.ToShortDateString())</td>

                    </tr>
                </table>

                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                @Html.HiddenFor(model => model.ClientId)

                @if (User.IsInRole("OfficerOfTheDay") || User.IsInRole("Administrator"))
                {
                    <div>
                        <b>Call Log - check/edit client info, then create a delivery</b>
                    </div>
                }

                    <div id="Address">
                        <table>
                            <tr>
                                <td><b>Household At:</b></td>
                                <td style="text-align: right">
                                    @Html.LabelFor(model => model.StreetNumber, htmlAttributes: new { @class = "control-label col-md-2" })
                                </td>
                                <td>
                                    @Html.EditorFor(model => model.StreetNumber, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.StreetNumber, "", new { @class = "text-danger" })
                                </td>
                                <td style="text-align: right">
                                    @Html.LabelFor(model => model.StreetName, htmlAttributes: new { @class = "control-label col-md-2" })
                                </td>
                                <td>
                                    @Html.EditorFor(model => model.StreetName, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.StreetName, "", new { @class = "text-danger" })
                                </td>
                            </tr>
                            <tr>
                                <td></td>
                                <td style="text-align: right">
                                    @Html.LabelFor(model => model.City, htmlAttributes: new { @class = "control-label col-md-2" })
                                </td>
                                <td>
                                    @Html.EditorFor(model => model.City, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.City, "", new { @class = "text-danger" })
                                </td>
                                <td style="text-align: right">
                                    @Html.LabelFor(model => model.Zip, htmlAttributes: new { @class = "control-label col-md-2" })
                                </td>
                                <td>
                                    @Html.DropDownListFor(model => model.Zip, new SelectList(Model.ZipCodes, "Value", "Text"), new { @class = "form-control" })
                                    @Html.ValidationMessageFor(model => model.Zip, "", new { @class = "text-danger" })
                                </td>
                            </tr>
                            <tr>
                                <td></td>
                                <td style="text-align: right">
                                    @Html.LabelFor(model => model.Phone, htmlAttributes: new { @class = "control-label col-md-2" })
                                </td>
                                <td>
                                    @Html.EditorFor(model => model.Phone, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.Phone, "", new { @class = "text-danger" })
                                </td>
                                <td style="text-align: right">
                                    @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label col-md-2" })
                                </td>
                                <td>
                                    @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
                                </td>
                                <td style="text-align: right">
                                    @Html.LabelFor(model => model.Notes, htmlAttributes: new { @class = "control-label col-md-2" })
                                </td>
                                <td>
                                    @Html.EditorFor(model => model.Notes, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.Notes, "", new { @class = "text-danger" })
                                </td>
                            </tr>
                        </table>
                    </div>
                    
                    <div id="Family">
                        <table>
                            <tr>
                                <td><b>Family Members:</b></td>
                                <td><b>First Name</b></td>
                                <td><b>Last Name</b></td>
                                <td><b>Age</b></td>
                            </tr>
                            @for (int i = 0; i < Model.FamilyMembers.Count; i++)
                            {
                                @Html.HiddenFor(mbr => Model.FamilyMembers[i].Id)
                                @Html.HiddenFor(mbr => Model.FamilyMembers[i].ClientId)
                                <tr>
                                    <td></td>
                                    @if (Model.FamilyMembers[i].Id > 0)
                                    {
                                        <td>@Html.EditorFor(mbr => Model.FamilyMembers[i].FirstName, new { htmlAttributes = new { @class = "form-control" } })</td>
                                        <td>@Html.EditorFor(m => Model.FamilyMembers[i].LastName, new { htmlAttributes = new { @class = "form-control" } })</td>
                                        <td>@Html.EditorFor(m => Model.FamilyMembers[i].Age, new { htmlAttributes = new { type = "number", min = "0", max = "110", @class = "form-control" } }) 
                                            @Html.ValidationMessageFor(model => model.Age, "", new {@class = "text-danger"}) </td>
                                        <td>
                                            @Html.EditorFor(model => model.FamilyMembers[i].Delete, new { htmlAttributes = new { @class = "form-control" } })
                                            Delete
                                        </td>
                                    }
                                    @if (Model.FamilyMembers[i].Id == 0 && Model.FamilyMembers[i].ClientId == 0) // HH was added to FamilyMembers list with no Id
                                    {
                                        <td>@Html.EditorFor(mbr => Model.FamilyMembers[i].FirstName, new { htmlAttributes = new { @class = "form-control" } })</td>
                                        <td>@Html.EditorFor(m => Model.FamilyMembers[i].LastName, new { htmlAttributes = new { @class = "form-control" } })</td>
                                        <td>@Html.EditorFor(m => Model.FamilyMembers[i].Age, new { htmlAttributes = new { type = "number", min = "0", max = "110" } })</td>
                                        <td>Head of Household</td>
                                    }
                                </tr>
                                    if (Model.FamilyMembers[i].ClientId < 0) // AddNew household member was added with ClientId = -1
                                    {
                                        <tr>
                                            <td></td>
                                            <td>@Html.EditorFor(mbr => Model.FamilyMembers[i].FirstName, new { htmlAttributes = new { @class = "form-control" } })</td>
                                            <td>@Html.EditorFor(m => Model.FamilyMembers[i].LastName, new { htmlAttributes = new { @class = "form-control" } })</td>
                                            <td>@Html.EditorFor(m => Model.FamilyMembers[i].Age, new { htmlAttributes = new { type = "number", min = "0", max = "110" } }) </td>
                                            <td>
                                                <input name ="btnAddMember" type="submit" value="Add Member" class="btn btn-default" id="AddButton" />
                                                <input name ="btnDeleteMember" type="submit" value="Delete Checked Members" class="btn btn-default" id="DeleteButton" />
                                            </td>
                                        </tr>
                                    }
                                }
                        </table>
                       </div>
                </div>
                <br />
                <div class="form-group">
                    <div class="col-md-offset-2 col-md-10">
                        <input name ="btnSave" type="submit" value="Save Changes and Exit" class="btn btn-default" id="SaveButton" />
                    </div>
                </div>
                if (User.IsInRole("OfficerOfTheDay") || User.IsInRole("Administrator"))
                {
                    <div>
                        <input name ="btnAdd" type="submit" value="Save Changes and Create a Delivery" class="btn btn-default" id="AddButton" />
                    </div>
                }
                <div>
                    @Html.ActionLink("Back to Select Page", "Index")
                </div>
                <div>
                    @Html.ActionLink("Return to Dashboard", "Index", "Home", new { }, null)
                </div>
    }
</body>
</html>

<script>
    $("input").change(function () 
    {
        flagChanges();
    });
</script>

<script>
    $("select").change(function () {
        flagChanges();
    });
</script>

<script>
    $(function () {
        window.$("#DesiredDeliveryDate").datepicker();
    });
</script>

<script type="text/javascript">
    $(document).ready(function () {
        window.$("#deleteMember").on("click", function () {
            window.$("#deleteCheckboxHidden").attr("value", "True");
        });
    });
</script>
